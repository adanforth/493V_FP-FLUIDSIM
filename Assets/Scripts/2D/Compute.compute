#pragma kernel render_particles;

#pragma kernel integrate_particles;

#pragma kernel enforce_boundaries;

#pragma kernel reset_cell_types;

#pragma kernel reset_cell_velocities_and_weights;

#pragma kernel mark_fluid_cells;

#pragma kernel copy_prev_velocities;

#pragma kernel particle_to_grid;

#pragma kernel convert_velocity_and_weight_to_float;

#pragma kernel avg_cell_velocities;

#pragma kernel restore_solid_cells;

#pragma kernel reset_particle_densities;

#pragma kernel update_particle_densities;

#pragma kernel calc_particle_rest_density_pt1;

#pragma kernel calc_particle_rest_density_pt2;

#pragma kernel solve_Incompressibility;

#pragma kernel grid_to_particle;

#pragma kernel add_projection_to_velocities;

#pragma kernel reset_projection_updates;

#pragma kernel convert_velocity_to_int;

#pragma kernel convert_velocity_to_float;

//#include <UnityShaderVariables.cginc>

struct mesh_data
{
    float4x4 mat;
    float4 color;
};

// Particle Information
RWStructuredBuffer<float3> particlePositions;
RWStructuredBuffer<float3> particleVelocities;
RWStructuredBuffer<mesh_data> meshProperties;
float _r;

// Integration
float _gravity;
float _timeStep;
float _numSubSteps;

// Grid Stuff
// Cell type stuff
RWStructuredBuffer<float> cellTypes;
StructuredBuffer<float> cellIsSolid;


RWStructuredBuffer<float3> cellWeights;
RWStructuredBuffer<float3> cellVelocities;
RWStructuredBuffer<float3> prevCellVelocities;
RWStructuredBuffer<int3> cellWeightsInt;
RWStructuredBuffer<int3> cellVelocitiesInt;

// projection
RWStructuredBuffer<int> particleDensity;
RWStructuredBuffer<int3> projectionUpdates;

RWStructuredBuffer<int2> densitySumAndNumFluid;

float _width;
float _height;
float _numIterations;
float _h;
float _fInvSpacing;
uint _fNumX;
uint _fNumY;
float _flipRatio;
int3 _mouseCell;
float2 _mouseVelocity;
int _mouseCellX;
int _mouseCellY;
float _mouseVelocityX;
float _mouseVelocityY;
bool _mouseDown;

float _resX;
float _resY;
float _particleRestDensity;
float _overrelaxation;

// cell states
float FLUID_CELL;
float AIR_CELL;
float SOLID_CELL;

// for boundaries
float _minX;
float _maxX;
float _minY;
float _maxY;
float x_cell_width;
float y_cell_width;

// RANDOMIZER

uint WangHash(uint seed)
{
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

// Generate a random float between 0 and 1, given a seed
float RandomFloat(uint seed)
{
    return float(WangHash(seed)) / 4294967295.0;
}

[numthreads(64, 1, 1)]
void render_particles(uint3 id : SV_DispatchThreadID)
{
    float4x4 mat = meshProperties[id.x].mat;

    mat[0][3] = particlePositions[id.x].x - _r ;
    mat[1][3] = particlePositions[id.x].y - _r ;

    meshProperties[id.x].mat = mat;
}

[numthreads(64, 1, 1)]
void integrate_particles(uint3 id : SV_DispatchThreadID) 
{    
    //float randomJitterX = .5 - RandomFloat(WangHash(_timeStep * id.x));
    //float randomJitterY = .5 - RandomFloat(WangHash(_timeStep / id.x));
    
    //if (particlePositions[id.x].y < _h)
    //{
    //    particlePositions[id.x].y += 0.01 * randomJitterX;
    //}
    
    particleVelocities[id.x].y += _timeStep * _gravity;
    particlePositions[id.x].x += particleVelocities[id.x].x * _timeStep;
    particlePositions[id.x].y += particleVelocities[id.x].y * _timeStep;
}

[numthreads(64, 1, 1)]
void enforce_boundaries(uint3 id : SV_DispatchThreadID)
{
    float x = particlePositions[id.x].x;
    float y = particlePositions[id.x].y;
    
    if (x < _minX)
    {
        particlePositions[id.x].x = _minX;
        particleVelocities[id.x].x = 0.0;
    } 
    if (x > _maxX)
    {
        particlePositions[id.x].x = _maxX;
        particleVelocities[id.x].x = 0.0;
    }
    if (y < _minY)
    {
        particlePositions[id.x].y = _minY;
        particleVelocities[id.x].y = 0.0;
    }
    if (y > _maxY)
    {
        particlePositions[id.x].y = _maxY;
        particleVelocities[id.x].y = 0.0;
    }
}


[numthreads(64, 1, 1)]
void copy_prev_velocities(uint3 id : SV_DispatchThreadID)
{
    prevCellVelocities[id.x] = cellVelocities[id.x];
}

[numthreads(64, 1, 1)]
void reset_cell_velocities_and_weights(uint3 id : SV_DispatchThreadID)
{
    cellVelocities[id.x] = float3(0.0, 0.0, 0.0);
    cellWeights[id.x] = float3(0.0, 0.0, 0.0);
    cellVelocitiesInt[id.x] = int3(0.0, 0.0, 0.0);
    cellWeightsInt[id.x] = int3(0.0, 0.0, 0.0);
}

[numthreads(64, 1, 1)]
void reset_cell_types(uint3 id : SV_DispatchThreadID)
{
    cellTypes[id.x] = cellIsSolid[id.x] == 0.0 ? SOLID_CELL : AIR_CELL;
}

[numthreads(64, 1, 1)]
void mark_fluid_cells(uint3 id : SV_DispatchThreadID)
{
    float x_p = particlePositions[id.x].x;
    float y_p = particlePositions[id.x].y;
    
    int x_i = (int) clamp(floor(x_p * _fInvSpacing), 0.0, _fNumX - 1);
    int y_i = (int) clamp(floor(y_p * _fInvSpacing), 0.0, _fNumY - 1);

    int cell_nr = (int) (x_i * _fNumY) + y_i;
    if (cellTypes[cell_nr] == AIR_CELL)
    {
        cellTypes[cell_nr] = FLUID_CELL;
    }
}

[numthreads(64, 1, 1)]
void particle_to_grid(uint3 id : SV_DispatchThreadID)
{
    // given some point...
    float x_p = particlePositions[id.x].x;
    float y_p = particlePositions[id.x].y;
    
    x_p = clamp(x_p, _h, (_fNumX - 1) * _h);
    y_p = clamp(y_p, _h, (_fNumY - 1) * _h);
    

    // Set velocities and weights to 0.
        // Done in prevous compute call
    
    // For the u component...   
    float dx = 0.0;
    float dy = 0.5 * _h;
    
    
    int x0 = (int) min(floor((x_p - dx) * _fInvSpacing), _fNumX - 2 );
    float tx = ((x_p - dx) - x0 * _h) * _fInvSpacing;
    int x1 = (int) min(x0 + 1.0, _fNumX - 2);
    
    int y0 = (int) min(floor((y_p - dy) * _fInvSpacing), _fNumY - 2);
    float ty = ((y_p - dy) - y0 * _h) * _fInvSpacing;
    int y1 = (int) min(y0 + 1.0, _fNumY - 2);
    
    float sx = 1.0 - tx;
    float sy = 1.0 - ty;
    
    float d0 = sx * sy;
    float d1 = tx * sy;
    float d2 = tx * ty;
    float d3 = sx * ty;
    
    int nr0 = x0 * _fNumY + y0;
    int nr1 = x1 * _fNumY + y0;
    int nr2 = x1 * _fNumY + y1;
    int nr3 = x0 * _fNumY + y1;
    
    float pv = particleVelocities[id.x].x;
    int pv_int = (int) (pv * 1000000.0f);
    
    // Add to grid
    InterlockedAdd(cellVelocitiesInt[nr0].x, (int) (pv_int * d0));
    InterlockedAdd(cellVelocitiesInt[nr1].x, (int) (pv_int * d1));
    InterlockedAdd(cellVelocitiesInt[nr2].x, (int) (pv_int * d2));
    InterlockedAdd(cellVelocitiesInt[nr3].x, (int) (pv_int * d3));
  
    InterlockedAdd(cellWeightsInt[nr0].x, (int) (d0 * 1000000.0f));
    InterlockedAdd(cellWeightsInt[nr1].x, (int) (d1 * 1000000.0f));
    InterlockedAdd(cellWeightsInt[nr2].x, (int) (d2 * 1000000.0f));
    InterlockedAdd(cellWeightsInt[nr3].x, (int) (d3 * 1000000.0f));
    
    // For the v component
    dx = 0.5 * _h;
    dy = 0.0;
    
    x0 = (int) min(floor((x_p - dx) * _fInvSpacing), _fNumX - 2);
    tx = ((x_p - dx) - x0 * _h) * _fInvSpacing;
    x1 = (int) min(x0 + 1.0, _fNumX - 2);
    
    y0 = (int) min(floor((y_p - dy) * _fInvSpacing), _fNumY - 2);
    ty = ((y_p - dy) - y0 * _h) * _fInvSpacing;
    y1 = (int) min(y0 + 1.0, _fNumY - 2);
    
    sx = 1.0 - tx;
    sy = 1.0 - ty;
    
    d0 = sx * sy;
    d1 = tx * sy;
    d2 = tx * ty;
    d3 = sx * ty;
    
    nr0 = x0 * _fNumY + y0;
    nr1 = x1 * _fNumY + y0;
    nr2 = x1 * _fNumY + y1;
    nr3 = x0 * _fNumY + y1;
    
    pv = particleVelocities[id.x].y;
    pv_int = (int) (pv * 1000000.0f);

        
    // Add to grid
    InterlockedAdd(cellVelocitiesInt[nr0].y, (int) (pv_int * d0));
    InterlockedAdd(cellVelocitiesInt[nr1].y, (int) (pv_int * d1));
    InterlockedAdd(cellVelocitiesInt[nr2].y, (int) (pv_int * d2));
    InterlockedAdd(cellVelocitiesInt[nr3].y, (int) (pv_int * d3));
    
    InterlockedAdd(cellWeightsInt[nr0].y, (int) (d0 * 1000000.0f));
    InterlockedAdd(cellWeightsInt[nr1].y, (int) (d1 * 1000000.0f));
    InterlockedAdd(cellWeightsInt[nr2].y, (int) (d2 * 1000000.0f));
    InterlockedAdd(cellWeightsInt[nr3].y, (int) (d3 * 1000000.0f));
}

[numthreads(64, 1, 1)]
void convert_velocity_and_weight_to_float(uint3 id : SV_DispatchThreadID)
{
    cellVelocities[id.x].x = ((float) cellVelocitiesInt[id.x].x) / 1000000.0f;
    cellVelocities[id.x].y = ((float) cellVelocitiesInt[id.x].y) / 1000000.0f;

    cellWeights[id.x].x = ((float) cellWeightsInt[id.x].x) / 1000000.0f;
    cellWeights[id.x].y = ((float) cellWeightsInt[id.x].y) / 1000000.0f;
}


[numthreads(64, 1, 1)]
void avg_cell_velocities(uint3 id : SV_DispatchThreadID)
{
    if (cellWeights[id.x].x > 0.0001)
    {
        cellVelocities[id.x].x = cellVelocities[id.x].x  / cellWeights[id.x].x;
    }
    if (cellWeights[id.x].y > 0.0001)
    {
        cellVelocities[id.x].y = cellVelocities[id.x].y / cellWeights[id.x].y;
    }
}

[numthreads(64, 1, 1)]
void restore_solid_cells(uint3 id : SV_DispatchThreadID)
{
    bool solid = cellTypes[id.x] == SOLID_CELL;
    int x = id.x / (_fNumY * 1);
    int rem = id.x % (_fNumY * 1);
    int y = rem / 1;
    int z = rem % 1;
    if (solid || (x > 0 && cellTypes[id.x - _fNumY] == SOLID_CELL))
    {
        cellVelocities[id.x].x = prevCellVelocities[id.x].x;
    }
    if (solid || (y > 0 && cellTypes[id.x - 1] == SOLID_CELL))
    {
        cellVelocities[id.x].y = prevCellVelocities[id.x].y;
    }
}

[numthreads(64, 1, 1)]
void reset_particle_densities(uint3 id : SV_DispatchThreadID)
{
    particleDensity[id.x] = 0;
}

[numthreads(64, 1, 1)]
void update_particle_densities(uint3 id : SV_DispatchThreadID)
{
    float h2 = 0.5 * _h;
    
    // given some point...
    float x_p = particlePositions[id.x].x;
    float y_p = particlePositions[id.x].y;
    
    x_p = clamp(x_p, _h, (_fNumX - 1) * _h);
    y_p = clamp(y_p, _h, (_fNumY - 1)  * _h);
    
    int x0 = (int) floor((x_p - h2) * _fInvSpacing);
    float tx = ((x_p - h2) - x0 * _h) * _fInvSpacing;
    int x1 = (int) min(x0 + 1, _fNumX - 2);
    
    int y0 = (int) floor((y_p - h2) * _fInvSpacing);
    float ty = ((y_p - h2) - y0 * _h) * _fInvSpacing;
    int y1 = (int) min(y0 + 1, _fNumY - 2);

    float sx = 1.0 - tx;
    float sy = 1.0 - ty;
    
    int nr0 = x0 * _fNumY + y0;
    int nr1 = x1 * _fNumY + y0;
    int nr2 = x1 * _fNumY + y1;
    int nr3 = x0 * _fNumY + y1;
    
    if (x0 < _fNumX && y0 < _fNumY)
    {
        InterlockedAdd(particleDensity[nr0], (int) (sx * sy * 100000.0f));
    }
    if (x1 < _fNumX && y0 < _fNumY)
    {
        InterlockedAdd(particleDensity[nr1], (int) (tx * sy * 100000.0f));
    }
    if (x1 < _fNumX && y1 < _fNumY)
    {
        InterlockedAdd(particleDensity[nr2], (int) (tx * ty * 100000.0f));
    }
    if (x0 < _fNumX && y1 < _fNumY)
    {
        InterlockedAdd(particleDensity[nr3], (int) (sx * ty * 100000.0f));
    }
}

[numthreads(64, 1, 1)]
void calc_particle_rest_density_pt1(uint3 id : SV_DispatchThreadID)
{
    if (cellTypes[id.x] == FLUID_CELL)
    {
        InterlockedAdd(densitySumAndNumFluid[0].x, particleDensity[id.x]);
        InterlockedAdd(densitySumAndNumFluid[0].y, 1);
    }
}

[numthreads(64, 1, 1)]
void calc_particle_rest_density_pt2(uint3 id : SV_DispatchThreadID)
{
    _particleRestDensity = (((float) densitySumAndNumFluid[0].x) / 100000.0f) / (float) densitySumAndNumFluid[0].y;
}

[numthreads(64, 1, 1)]
void reset_projection_updates(uint3 id : SV_DispatchThreadID)
{
    projectionUpdates[id.x].x = 0;
    projectionUpdates[id.x].y = 0;
}

[numthreads(64, 1, 1)]
void convert_velocity_to_int(uint3 id : SV_DispatchThreadID)
{
    cellVelocitiesInt[id.x].x = (int) (cellVelocities[id.x].x * 1000000.0f);
    cellVelocitiesInt[id.x].y = (int) (cellVelocities[id.x].y * 1000000.0f);
}

[numthreads(64, 1, 1)]
void convert_velocity_to_float(uint3 id : SV_DispatchThreadID)
{
    cellVelocities[id.x].x = ((float) cellVelocitiesInt[id.x].x) / 1000000.0f;
    cellVelocities[id.x].y = ((float) cellVelocitiesInt[id.x].y) / 1000000.0f;
}


[numthreads(64, 1, 1)]
void solve_Incompressibility(uint3 id : SV_DispatchThreadID)
{    
    uint center = id.x;
    if (cellTypes[center] == FLUID_CELL)
    {
        
        uint left = center - _fNumY;
        uint right = center + _fNumY;
        uint bottom = center - 1;
        uint top = center + 1;
        
        int sx0 = cellIsSolid[left];
        int sx1 = cellIsSolid[right];
        int sy0 = cellIsSolid[bottom];
        int sy1 = cellIsSolid[top];
        
        int s = sx0 + sx1 + sy0 + sy1;
        
        if (s != 0)
        {
            //float div = cellVelocitiesInt[right].x - cellVelocitiesInt[center].x +
            //            cellVelocitiesInt[top].y - cellVelocitiesInt[center].y; 
            float div = cellVelocities[right].x - cellVelocities[center].x +
                        cellVelocities[top].y - cellVelocities[center].y;
            
            if (_particleRestDensity > 0.0)
            {
                float rest = _particleRestDensity;
                //if (center % _fNumY <= )
                //{
                //    rest *= 6;
                //}
                
                float k = 1;
                float compression = ((float) particleDensity[center]) / 100000.0f - rest;
                if (compression > 0.0)
                    div = div - k * compression;
            }

            
            float p = -1 * div / s;
            p *= _overrelaxation;
            
            //InterlockedAdd(cellVelocitiesInt[center].x, -1 * (int) (p * sx0 * 1000000.0f));
            //InterlockedAdd(cellVelocitiesInt[right].x, (int) (p * sx1 * 1000000.0f));
            //InterlockedAdd(cellVelocitiesInt[center].y, -1 * (int) (p * sy0 * 1000000.0f));
            //InterlockedAdd(cellVelocitiesInt[top].y, (int) (p * sy1 * 1000000.0f));
            
            InterlockedAdd(projectionUpdates[center].x, -1 * (int) (1000000.0f * sx0 * p));
            InterlockedAdd(projectionUpdates[right].x, (int) (1000000.0f * sx1 * p));
            InterlockedAdd(projectionUpdates[center].y, -1 * (int) (1000000.0f * sy0 * p));
            InterlockedAdd(projectionUpdates[top].y, (int) (1000000.0f * sy1 * p));
        }
    }
}

[numthreads(64, 1, 1)]
void add_projection_to_velocities(uint3 id : SV_DispatchThreadID)
{
    float scale = .3;

    //if (_particleRestDensity > 0)
    //{
    //    scale = _timeStep / (_particleRestDensity * _h);
    //}

    cellVelocities[id.x].x += (((float) projectionUpdates[id.x].x) / 1000000.0f) * scale;
    cellVelocities[id.x].y += (((float) projectionUpdates[id.x].y) / 1000000.0f) * scale;
}

[numthreads(64, 1, 1)]
void grid_to_particle(uint3 id : SV_DispatchThreadID)
{
    // given some point...
    float x_p = particlePositions[id.x].x;
    float y_p = particlePositions[id.x].y;
    
    x_p = clamp(x_p, _h, (_fNumX - 1) * _h);
    y_p = clamp(y_p, _h, (_fNumY - 1) * _h);
    

    // Set velocities and weights to 0.
        // Done in prevous compute call
    
    // For the u component...   
    float dx = 0.0;
    float dy = 0.5 * _h;
    
    
    int x0 = (int) min(floor((x_p - dx) * _fInvSpacing), _fNumX - 2);
    float tx = ((x_p - dx) - x0 * _h) * _fInvSpacing;
    int x1 = (int) min(x0 + 1.0, _fNumX - 2);
    
    int y0 = (int) min(floor((y_p - dy) * _fInvSpacing), _fNumY - 2);
    float ty = ((y_p - dy) - y0 * _h) * _fInvSpacing;
    int y1 = (int) min(y0 + 1.0, _fNumY - 2);
    
    float sx = 1.0 - tx;
    float sy = 1.0 - ty;
    
    float d0 = sx * sy;
    float d1 = tx * sy;
    float d2 = tx * ty;
    float d3 = sx * ty;
    
    int nr0 = x0 * _fNumY + y0;
    int nr1 = x1 * _fNumY + y0;
    int nr2 = x1 * _fNumY + y1;
    int nr3 = x0 * _fNumY + y1;
    
    int valid0 = (cellTypes[nr0] != AIR_CELL || cellTypes[nr0 - _fNumY] != AIR_CELL) ? 1.0 : 0.0;
    int valid1 = (cellTypes[nr1] != AIR_CELL || cellTypes[nr1 - _fNumY] != AIR_CELL) ? 1.0 : 0.0;
    int valid2 = (cellTypes[nr2] != AIR_CELL || cellTypes[nr2 - _fNumY] != AIR_CELL) ? 1.0 : 0.0;
    int valid3 = (cellTypes[nr3] != AIR_CELL || cellTypes[nr3 - _fNumY] != AIR_CELL) ? 1.0 : 0.0;
    
    float v = particleVelocities[id.x].x;
    float d = valid0 * d0 + valid1 * d1 + valid2 * d2 + valid3 * d3;
    
    if (d > 0.0)
    {
        float picU = (valid0 * d0 * cellVelocities[nr0].x) +
                     (valid1 * d1 * cellVelocities[nr1].x) +
                     (valid2 * d2 * cellVelocities[nr2].x) +
                     (valid3 * d3 * cellVelocities[nr3].x);
        
        float diffU = (valid0 * d0 * (cellVelocities[nr0].x - prevCellVelocities[nr0].x)) +
                      (valid1 * d1 * (cellVelocities[nr1].x - prevCellVelocities[nr1].x)) +
                      (valid2 * d2 * (cellVelocities[nr2].x - prevCellVelocities[nr2].x)) +
                      (valid3 * d3 * (cellVelocities[nr3].x - prevCellVelocities[nr3].x));
        
        picU /= d;
        diffU /= d;
        
        float flipU = v + diffU;

        particleVelocities[id.x].x = (1 - _flipRatio) * picU + _flipRatio * flipU;
        if (_mouseDown && abs(_mouseCellY - y0) < 2 && abs(_mouseCellX - x0) < 2)
        {
            particleVelocities[id.x].x +=  25 * _mouseVelocityX;
        } 
    }
    
    // For the v component...   
    dx = 0.5 * _h;
    dy = 0.0;
    
    x0 = (int) min(floor((x_p - dx) * _fInvSpacing), _fNumX - 2);
    tx = ((x_p - dx) - x0 * _h) * _fInvSpacing;
    x1 = (int) min(x0 + 1.0, _fNumX - 2);
    
    y0 = (int) min(floor((y_p - dy) * _fInvSpacing), _fNumY - 2);
    ty = ((y_p - dy) - y0 * _h) * _fInvSpacing;
    y1 = (int) min(y0 + 1.0, _fNumY - 2);
    
    sx = 1.0 - tx;
    sy = 1.0 - ty;
    
    d0 = sx * sy;
    d1 = tx * sy;
    d2 = tx * ty;
    d3 = sx * ty;
    
    nr0 = x0 * _fNumY + y0;
    nr1 = x1 * _fNumY + y0;
    nr2 = x1 * _fNumY + y1;
    nr3 = x0 * _fNumY + y1;
    
    valid0 = (cellTypes[nr0] != AIR_CELL || cellTypes[nr0 - 1] != AIR_CELL) ? 1.0 : 0.0;
    valid1 = (cellTypes[nr1] != AIR_CELL || cellTypes[nr1 - 1] != AIR_CELL) ? 1.0 : 0.0;
    valid2 = (cellTypes[nr2] != AIR_CELL || cellTypes[nr2 - 1] != AIR_CELL) ? 1.0 : 0.0;
    valid3 = (cellTypes[nr3] != AIR_CELL || cellTypes[nr3 - 1] != AIR_CELL) ? 1.0 : 0.0;
    
    v = particleVelocities[id.x].y;
    d = valid0 * d0 + valid1 * d1 + valid2 * d2 + valid3 * d3;
    
    if (d > 0.0)
    {
        float picV = (valid0 * d0 * cellVelocities[nr0].y) +
                     (valid1 * d1 * cellVelocities[nr1].y) +
                     (valid2 * d2 * cellVelocities[nr2].y) +
                     (valid3 * d3 * cellVelocities[nr3].y);

        float diffV = (valid0 * d0 * (cellVelocities[nr0].y - prevCellVelocities[nr0].y)) +
                      (valid1 * d1 * (cellVelocities[nr1].y - prevCellVelocities[nr1].y)) +
                      (valid2 * d2 * (cellVelocities[nr2].y - prevCellVelocities[nr2].y)) +
                      (valid3 * d3 * (cellVelocities[nr3].y - prevCellVelocities[nr3].y));
        
        picV /= d;
        diffV /= d;
        
        float flipV = v + diffV;
        
        particleVelocities[id.x].y = (1 - _flipRatio) * picV + _flipRatio * flipV;
        if (_mouseDown && abs(_mouseCellY - y0) < 2 && abs(_mouseCellX - x0) < 2)
        {
            particleVelocities[id.x].y += 25 *  _mouseVelocityY;
        }
    }
}


